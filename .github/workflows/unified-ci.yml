name: Unified CI - Backend & Frontend

on:
  workflow_dispatch: 
  push:
    branches:
        - testing        
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/unified-ci.yml'

  pull_request:
    branches:
      - main
      - development
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/unified-ci.yml'

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  # ---------------- BACKEND JOB ----------------
  backend:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

      - name: Build & Push Product Service
        run: |
          TAG=${{ github.ref_name == 'main' && 'latest' || format('dev-{0}', github.sha) }}
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:$TAG ./backend/product_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:$TAG

      - name: Build & Push Order Service
        run: |
          TAG=${{ github.ref_name == 'main' && 'latest' || format('dev-{0}', github.sha) }}
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:$TAG ./backend/order_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:$TAG

      - name: Logout Azure
        if: always()
        run: az logout

  # ---------------- FRONTEND JOB ----------------
  frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

      - name: Build & Push Frontend
        run: |
          TAG=${{ github.ref_name == 'main' && 'latest' || format('dev-{0}', github.sha) }}
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:$TAG ./frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:$TAG

      - name: Logout Azure
        if: always()
        run: az logout

